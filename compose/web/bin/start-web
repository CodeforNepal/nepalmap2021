#!/bin/bash

set -eou pipefail

: ${APP_ENV?"APP_ENV not set. Aborting !"}
: ${POSTGRES_HOST?"POSTGRES_HOST not set. Aborting !"}
: ${POSTGRES_PORT?"POSTGRES_PORT not set. Aborting !"}
: ${POSTGRES_USERNAME?"POSTGRES_USERNAME not set. Aborting !"}
: ${POSTGRES_PASSWORD?"POSTGRES_PASSWORD not set. Aborting !"}
: ${POSTGRES_DATABASE?"POSTGRES_DATABASE not set. Aborting !"}

# prepare environment variable for django settings
export DATABASE_URL="postgresql://$POSTGRES_USERNAME:$POSTGRES_PASSWORD@$POSTGRES_HOST:$POSTGRES_PORT/$POSTGRES_DATABASE"

# setup pgpassfile for psql non-interactive authentication
export PGPASSWORD="$POSTGRES_PASSWORD"

# Migrate
# As of wazimap 1.1.1, migrations fail when the ./wazimap_np/tables.py file
# already lists tables but the tables do not yet exist. Specifically, the
# migration that adds a geo_version column to each table fails because
# the column already exists for every table listed in tables.py. The `mv`
# command temporarily hides the table listings until after the migrations
# are complete.
mv ./wazimap_np/tables.py ./wazimap_np/tables.py.bkp
# The ./wazimap_np/tables.py file needs to exist, but it needs not to have
# tables defined if we want the migrations to succeed.
head -2 ./wazimap_np/tables.py.bkp > ./wazimap_np/tables.py
python ./manage.py migrate --no-input
mv ./wazimap_np/tables.py.bkp ./wazimap_np/tables.py

# Import data for tables
cat sql/*.sql | psql -w -U "$POSTGRES_USERNAME" -h "$POSTGRES_HOST"

# Start server
if [ "$APP_ENV" = "dev" ]; then

    exec python ./manage.py runserver 0.0.0.0:8000

else

    export DJANGO_SETTINGS_MODULE="wazimap_np.settings"
    python ./manage.py collectstatic --no-input
    exec gunicorn wazimap.wsgi:application --worker-class sync --workers 4 --timeout 30 --log-file - --bind 0.0.0.0:8000 --name wazimap_np --chdir /usr/src/app

fi
